name: It  is my first pipeline.
 
on:
  workflow_dispatch:
  # push:
  #   branches: [ "main" ]
  pull_request:
    branches:
       - main
    # inputs:
    #   ec2-name:
    #     description: EC2 name
    #     required: true
    #     default: 'App Server'
    #     type: string
jobs:
  infrastructure:
    environment:
      name: 'Pipeline-inf'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # - uses: actions/setup-node@v3
      #   with:
      #     node-version: '14'
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
          aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          aws-region: us-east-1
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      - name: Terraform Apply
        id:   apply
        env:
          # TF_VAR_ec2_name:  "${{ github.event.inputs.ec2-name }}"
          TF_VAR_ec2_name:  "yavuz"
        run: |
          cd tf-example/
          terraform init
          terraform validate
          terraform plan 
          terraform apply -auto-approve
          
  lint:
    name: Ensure code standards
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: "Checkout repostiory"
        uses: actions/checkout@v3
      - name: "Setup node"
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: "Install dependencies"
        uses: bahmutov/npm-install@v1
      - name: "Lint code"
        run: npm run lint --if-present
        
  build:
    # permissions:
    #   contents: read
    environment:
      name: 'Pipeline-Test'
    needs: [infrastructure]
    runs-on: ubuntu-latest
    # strategy:
    #   matrix:
    #     node-version: [18.x]
    steps:
    - uses: actions/checkout@v3
    - name: 18.x # Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: 18.x # ${{ matrix.node-version }}
        cache: 'npm'

    - name: npm install, build, and test
      run: |
        # npm install
        npm ci
        npm run build --if-present
        npm run test --if-present

    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v3
      if: success() || failure() # always run even if the previous step fails
      with:
        report_paths: '**/junit.xml'
        detailed_summary: true
        include_passed: true

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.3
      with:
        name: node-app
        path: .

  deploy:
    permissions:
      packages: read
    runs-on: ubuntu-latest
    # strategy:
    #   matrix:
    #     node-version: [18.x]
    needs: [build]
    environment:
      name: 'Pipelibe-Prod'
      # url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download a Build Artifact
      uses: actions/download-artifact@v2.1.1
      with:
        name: node-app
        path: web  # Eylem tarafından yaratılan artifact ismi

    - name: Install AWS CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y awscli
    - name: Configure AWS credentials
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set region us-east-1  # EC2 örneğinizin bölgesini belirtin
    - name: copy file to server
      uses: appleboy/scp-action@v0.1.4
      with:
        host: github.bayyavuz.com # ${{ secrets.HOST }}
        username: ubuntu # ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        # port: ${{ secrets.PORT }}
        source: web/*
        target: /var/app

    - uses: JimCronqvist/action-ssh@7737f1192ddd8376686e9d6354dea44592c942bf
      name: Execute SSH commmands on remote server
      with:
        # hosts: '${{ secrets.REMOTE_USER }}@${{ secrets.HOSTNAME }}'
        hosts: ubuntu@github.bayyavuz.com
        privateKey: ${{ secrets.SSH_PRIVATE_KEY }}
        command: |
          cd /var/app/web
          # npm ci
          pm2 start /var/app/web || pm2 restart /var/app/web
          pm2 monit
          sudo service nginx restart

  post:
    needs: [deploy]
    environment:
      name: 'Pipeline-Post'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # - uses: actions/setup-node@v3
      #   with:
      #     node-version: '14'
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
          aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          aws-region: us-east-1
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      - name: Terraform destroy
        id:   destroy
        env:
          # TF_VAR_ec2_name:  "${{ github.event.inputs.ec2-name }}"
          TF_VAR_ec2_name:  "yavuz"
        run: |
          cd tf-example/
          terraform init
          terraform validate 
          terraform apply -auto-approve
          terraform destroy -auto-approve
