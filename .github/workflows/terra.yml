on:
  workflow_dispatch:
  # push:
    # branches: [ "main" ]
    # inputs:
    #   ec2-name:
    #     description: EC2 name
    #     required: true
    #     default: 'App Server'
    #     type: string
jobs:
  infrastructure:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '14'
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
          aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          aws-region: us-east-1
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      - name: Terraform Apply
        id:   apply
        env:
          # TF_VAR_ec2_name:  "${{ github.event.inputs.ec2-name }}"
          TF_VAR_ec2_name:  "yavuz"
        run: |
          cd tf-example/
          terraform init
          terraform validate
          terraform plan 
          terraform apply -auto-approve

       
  # post:
  #   needs: [infrastructure]
  #   runs-on: ubuntu-latest
  #   name: Destroy terraform workspace
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: terraform destroy
  #       uses: dflook/terraform-destroy-workspace@v1
  #       id: first_try
  #       continue-on-error: true
  #       with:
  #         path: ./tf-example
  #         workspace: ${{ github.head_ref }}

  #     - name: Retry failed destroy
  #       uses: dflook/terraform-destroy-workspace@v1
  #       if: ${{ steps.first_try.outputs.failure-reason == 'destroy-failed' }}
  #       with:
  #         path: ./tf-example
  #         workspace: ${{ github.head_ref }}


  post:
      needs: [infrastructure]       
      runs-on: ubuntu-latest
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: 'us-east-1'
      steps:
       - name: Checkout
         uses: actions/checkout@v2
        
       - name: Setup Terraform                                                                      
         uses: hashicorp/setup-terraform@v1

       # - name: Terraform Init
       #   id: init
       #   env:
       #     # TF_VAR_ec2_name:  "${{ github.event.inputs.ec2-name }}"
       #     TF_VAR_ec2_name:  "yavuz"
       #   run: terraform init  
        
       - name: Show Destroy plan
         run: terraform plan -destroy
         continue-on-error: true

       - name: Terraform destroy
         id: destroy
         env:
           # TF_VAR_ec2_name:  "${{ github.event.inputs.ec2-name }}"
           TF_VAR_ec2_name:  "yavuz"
         run: |
           cd tf-example/
           terraform init
           terraform destroy -auto-approve


  
         
    # # needs: [infrastructure]
    # runs-on: ubuntu-latest
    # steps:
    #   - uses: actions/checkout@v3
    #   - uses: actions/setup-node@v3
    #     with:
    #       node-version: '14'
    #   - name: Configure AWS credentials
    #     uses: aws-actions/configure-aws-credentials@v1
    #     with:
    #       aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
    #       aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
    #       aws-region: us-east-1
    #   - name: Setup Terraform
    #     uses: hashicorp/setup-terraform@v2
    #     with:
    #       terraform_wrapper: false
    #   - name: Terraform destroy
    #     id:   destroy
    #     env:
    #       TF_VAR_ec2_name:  "${{ github.event.inputs.ec2-name }}"
    #     run: |
    #       cd tf-example/
    #       terraform init
    #       terraform destroy -auto-approve

# name: terraform infa.

# on:
#   # workflow_dispatch:
#   push:
#     branches: [ "main" ]

# jobs:
#   infrastructure:
#     environment:
#       name: 'infrastructure'
#     runs-on: ubuntu-20.04
#     steps:
#       - name: checkout
#         uses: actions/checkout@v2
#       - name: terraform init
#         uses: robertdebock/terraform-action@1.1.4
#         with:
#           action: init
#           directory: .
#       - name: terraform validate
#         uses: robertdebock/terraform-action@1.1.4
#         with:
#           action: validate
#           directory: .
#       - name: terraform plan
#         uses: robertdebock/terraform-action@1.1.4
#         with:
#           action: plan
#           directory: .
#       - name: terraform apply
#         uses: robertdebock/terraform-action@1.1.4
#         with:
#           action: apply
#           directory: .
#         env:
#           TF_CLI_ARGS: "-input=false -auto-approve"
          
#   post:
#     environment:
#       name: 'post'
#     needs: [infrastructure]
#     runs-on: ubuntu-latest
#     steps:
#     - name: checkout
#       uses: actions/checkout@v2
#     - name: terraform destroy
#       uses: robertdebock/terraform-action@1.1.4
#       with:
#         action: destroy
#         directory: .
#       env:
#         TF_CLI_ARGS: "-input=false -auto-approve"
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
